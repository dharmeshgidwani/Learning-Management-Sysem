from django.db import models
from django.contrib.auth.models import User  

class Course(models.Model):
    courseID = models.AutoField(primary_key=True)
    teacherId = models.IntegerField()
    Name = models.CharField(max_length=255)
    Description = models.TextField()
    number_of_weeks = models.IntegerField()
    courseTag = models.CharField(max_length=255)
    dateofcreation = models.DateTimeField()
    Total_Quiz = models.IntegerField()
    Total_Assignment = models.IntegerField()
    courseFees = models.FloatField()

    def __str__(self):
        return self.Name

class CourseAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.course.Name}"

class CourseContent(models.Model):
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    weekNo = models.IntegerField()
    TextContent = models.TextField()
    Image = models.ImageField(upload_to='course_images/', blank=True, null=True)
    Video = models.FileField(upload_to='course_videos/', blank=True, null=True)

    def __str__(self):
        return f"Week {self.weekNo} - {self.course.Name} Content"

class CourseContentAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    course_content = models.ForeignKey(CourseContent, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.course_content}"

class Enrollment(models.Model):
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    paymentStatus = models.BooleanField(default=True)

    def __str__(self):
        return f"Enrollment for {self.student.username} in {self.course.Name}"

class Assignment(models.Model):
    assignmentId = models.AutoField(primary_key=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    assignmentName = models.CharField(max_length=255)
    week = models.IntegerField()
    assignmentQ = models.TextField()
    assignmentAnswer = models.TextField(null=True, blank=True)
    maximum_points = models.IntegerField()

    def __str__(self):
        return f"Assignment {self.assignmentId} - {self.assignmentName}"

class AssignmentAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    assignment = models.ForeignKey(Assignment, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.assignment}"

class Quiz(models.Model):
    quizId = models.AutoField(primary_key=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    quizName = models.CharField(max_length=255)
    week = models.IntegerField()
    quizQ = models.TextField()
    quizAnswer = models.TextField(null=True, blank=True)
    quizChoiceAnswer = models.TextField(null=True, blank=True)
    maximum_points = models.IntegerField()

    def __str__(self):
        return f"Quiz {self.quizId} - {self.quizName}"

class QuizAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.quiz}"

class Doubt(models.Model):
    QId = models.AutoField(primary_key=True)
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    Question = models.TextField()
    Answer = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Doubt {self.QId} - {self.student.username} in {self.course.Name}"

class DoubtAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    doubt = models.ForeignKey(Doubt, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.doubt}"

class AssignmentSubmission(models.Model):
    submissionId = models.AutoField(primary_key=True)
    assignment = models.ForeignKey(Assignment, on_delete=models.CASCADE)
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    Submissiondate = models.DateTimeField()
    pointsScored = models.IntegerField()
    text = models.TextField()

    def __str__(self):
        return f"Assignment Submission {self.submissionId} - {self.assignment.assignmentName} by {self.student.username}"

class SubmissionAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    submission = models.ForeignKey(AssignmentSubmission, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.submission}"

class QuizSubmission(models.Model):
    submissionId = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    Submissiondate = models.DateTimeField()
    pointsScored = models.IntegerField()
    text = models.TextField()

    def __str__(self):
        return f"Quiz Submission {self.submissionId} - {self.quiz.quizName} by {self.student.username}"

class QuizSubmissionAccess(models.Model):
    ROLE_CHOICES = (
        ('teacher', 'Teacher'),
        ('student', 'Student'),
    )

    submission = models.ForeignKey(QuizSubmission, on_delete=models.CASCADE)
    usertoken = models.CharField(max_length=255)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)

    def __str__(self):
        return f"{self.role} - {self.submission}"
